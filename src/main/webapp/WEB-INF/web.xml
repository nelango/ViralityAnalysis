<?xml version="1.0" encoding="utf-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee" version="2.5">

<filter>
    <filter-name>ObjectifyFilter</filter-name>
    <filter-class>com.googlecode.objectify.ObjectifyFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>ObjectifyFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

  <httpProtocol >
  <customHeaders>
    <add name="Access-Control-Allow-Origin" value= "*" />
    <add name="Access-Control-Allow-Headers" value="Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With" />
    <add name="Access-Control-Allow-Methods" value="GET,POST,PUT,DELETE,OPTIONS" />
    <add name="Access-Control-Allow-Credentials" value="true" />
  </customHeaders>
  </httpProtocol>

  <!--
    This sets up our JerseyContextFilter so that we have a default URL for our Jersey calls.
    This also declares the class path to our webservices, so that it knows where to look for which
    calls.  Note that the url is /api/*, which means the paths for all Jersey Objects must start with "api/*"
  -->
  <filter>
    <filter-name>JerseyContextFilter</filter-name>
    <filter-class>org.glassfish.jersey.servlet.ServletContainer</filter-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>com.dbproject.viralityanalysis.JerseyApplication</param-value>
    </init-param>
    <init-param>
      <param-name>jersey.config.server.provider.packages</param-name>
      <param-value>com.dbproject.viralityanalysis.endpoint</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>JerseyContextFilter</filter-name>
    <url-pattern>/api/*</url-pattern>
  </filter-mapping>
  <!--
    Handles which file to load up first when someone navigates to this web application.  This is where our example
    front end code starts.
  -->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
 
</web-app>
